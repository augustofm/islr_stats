x <- 1:10
sigmoid = function(x) {
1 / (1 + exp(-x))
}
sigmoid(x)
plot(sigmoid(x))
sort(-x)
sort(x)
x <- 1:10
x <- 10:-1:1
x <- 10:1:-1
x <- 10:1
x
sigmoid = function(x) {
1 / (1 + exp(-x))
}
plot(sigmoid(x))
x <- 10:-10
sigmoid = function(x) {
1 / (1 + exp(-x))
}
plot(sigmoid(x))
N <- 20*144
x <- N/2:-N/2
length(x)
20*144
x <- (N-1)/2:-(N-1)/2
length(x)
x <- (N-2)/2:-(N-2)/2
length(x)
x <- (N-3)/2:-(N-3)/2
length(x)
N <- 20*144
N
x <- (N-3)/2:-(N-3)/2
length(x)
sigmoid = function(x) {
1 / (1 + exp(-x))
}
plot(sigmoid(x))
x <- (N-3)/2:-(N-3)/2
length(x)
plot(x)
N <- 20*144
N
((N-3)/2):-((N-3)/2)
N <- 20*144
x <- (N/2):-(N/2)
x
plot(x)
sigmoid = function(x) {
1 / (1 + exp(-x))
}
plot(sigmoid(x))
sigmoid = function(x) {
1 / (1 + exp(-N*x))
}
plot(sigmoid(x))
1 / (1 + exp(-(1/N)*x))
sigmoid = function(x) {
1 / (1 + exp(-(1/N)*x))
}
plot(sigmoid(x))
sigmoid = function(x) {
1 / (1 + N*exp(-x))
}
plot(sigmoid(x))
sigmoid = function(x) {
1 / (1 + (1/N)*exp(-x))
}
plot(sigmoid(x))
N <- 20*144
sigmoid = function(x) {
1 / (1 + exp(-x/N))
}
plot(sigmoid(x))
sigmoid = function(x) {
1 / (1 + exp(-x/length(x)))
}
plot(sigmoid(x))
N <- 20*144
N
x <- (N/2):-(N/2)
sigmoid = function(x) {
1 / (1 + exp(-x/length(x)))
}
plot(sigmoid(x))
1 / (1 + exp(-x))
sigmoid = function(x) {
1 / (1 + exp(-x))
}
sigmoid = function(x) {
1 / (1 + exp(-x))
}
plot(sigmoid(x))
sigmoid = function(x) {
1 / (1 + exp(-x*(1/N)))
}
plot(sigmoid(x))
N
N <- 20*144
x <- (N/2):-(N/2)
x <- scale(x, min=min(x),center = (max(x)-min(x)))
N <- 20*144
x <- (N/2):-(N/2)
x <- scale(x, min=min(x),center = (max(x)-min(x)))
N <- 20*144
x <- (N/2):-(N/2)
x <- scale(x, scale=min(x),center = (max(x)-min(x)))
plot(x)
?scale
N <- 20*144
x <- (N/2):-(N/2)
x <- scale(x, center=min(x),scale = (max(x)-min(x)))
plot(x)
sigmoid = function(x) {
}
sigmoid = function(x) {
1 / (1 + exp(-x))
}
plot(sigmoid(x))
sigmoid = function(x) {
1 / (1 + exp(-x))
}
plot(sigmoid(x))
x
sigmoid = function(x) {
1 / (1 + exp(-x))
}
plot(sigmoid(x))
N <- 20*144
x <- (N/2):-(N/2)
x <- scale(x, center=min(x),scale = (max(x)-min(x)))
sigmoid = function(x) {
1 / (1 + exp(-x))
}
plot(sigmoid(x))
sigmoid(10)
sigmoid(x)
dt <- data.table("x"=(N/2):-(N/2))
require(data.table)
dt <- data.table("x"=(N/2):-(N/2))
dt
dt[,sigm:=sigmoid(x)]
ggplot(dt)+geom_point(aes(x=x, y=sigm), size=0.01)
require(ggplot2)
ggplot(dt)+geom_point(aes(x=x, y=sigm), size=0.01)
dt[,sigm:=sigmoid(x/N)]
ggplot(dt)+geom_point(aes(x=x, y=sigm), size=0.01)
dt[,sigm:=sigmoid(x)]
ggplot(dt)+geom_point(aes(x=x, y=sigm), size=0.01)
dt[,sigm:=sigmoid(10*x/N)]
ggplot(dt)+geom_point(aes(x=x, y=sigm), size=0.01)
dt <- data.table("x"=-(N/2):(N/2))
dt[,sigm:=sigmoid(10*x/N)]
ggplot(dt)+geom_point(aes(x=x, y=sigm), size=0.01)
dt <- data.table("x"=(N/2):-(N/2))
dt[,sigm:=sigmoid(10*x/N)]
dt
dt[,id:=I]
dt <- data.table("x"=(N/2):-(N/2))
dt[,sigm:=sigmoid(10*x/N)]
dt[,id:=.I]
ggplot(dt)+geom_point(aes(x=id, y=sigm), size=0.01)
dt
require(randomForest)
setwd("~/Documents/repository/islr_stats/exercises")
# libraries ----
library(data.table)
library(ggplot2)
library(ISLR)
library(MASS)
## QUESTION 10 ----
dt <- data.table(Weekly)
str(dt)
pairs(dt[,-c("Year")])
# b) Logistic Linear Regression
lda.fit <- lda(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume, data=dt)
lda.fit
?lda.fit
?lda
# b) Logistic Linear Regression
lda.fit <- glm(Direction ~ Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume, data = dt,family = binomial)
glm
summary(lda.fit)
# Lag 2 seems to be the only predictor important to the analysis
table(dt$Direction, lda.fit$fitted.values)
dt$Direction
lda.fit$fitted.values
# b) Logistic Linear Regression
glm.fit <- glm(Direction ~ Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume, data = dt,family = binomial)
# b) Logistic Linear Regression
glm.fit <- glm(Direction ~ Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume, data = dt,family = binomial)
# Lag 2 seems to be the only predictor important to the analysis
glm.pred <- predict(glm.fit, type = "response")
table(glm$pred, dt$Direction)
# b) Logistic Linear Regression
glm.fit <- glm(Direction ~ Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume, data = dt,family = binomial)
# Lag 2 seems to be the only predictor important to the analysis
glm.pred <- predict(glm.fit, type = "response")
# Lag 2 seems to be the only predictor important to the analysis
glm.prob <- predict(glm.fit, type = "response")
glm.pred <- rep("Down",nrow(dt))
# Lag 2 seems to be the only predictor important to the analysis
glm.prob <-
glm.prob <- data.table("prob" = predict(glm.fit, type = "response"))
glm.prob
glm.prob[prob > 0.5, pred := "Up"]
glm.prob[is.na(prob),pred := "Down"]
table(glm.prob$pred, dt$Direction)
dt$Direction
glm.prob
# Lag 2 seems to be the only predictor important to the analysis
glm.prob <- data.table("prob" = predict(glm.fit, type = "response"))
glm.prob[prob > 0.5, pred := "Up"]
glm.prob[is.na(pred),pred := "Down"]
table(glm.prob$pred, dt$Direction)
# Overall fraction of correct predictions:
(54+557)/nrow(glm.prob)
# d) Only with Lag2
glm.fit <- glm(Direction ~ Lag2, data = dt,family = binomial)
summary(lda.fit)
# Lag 2 seems to be the only predictor important to the analysis
glm.prob <- data.table("prob" = predict(glm.fit, type = "response"))
glm.prob[prob > 0.5, pred := "Up"]
glm.prob[is.na(pred),pred := "Down"]
table(glm.prob$pred, dt$Direction)
# Overall fraction of correct predictions:
(33+579)/nrow(glm.prob)
# Overall fraction of correct predictions:
(54+557)/nrow(glm.prob)
# e) FOR LDA
fit <- ldam(Direction ~ Lag2, data = dt)
# e) FOR LDA
fit <- lda(Direction ~ Lag2, data = dt)
# e) FOR LDA
fit <- lda(Direction ~ Lag2, data = dt)
pred <- data.table("prob" = predict(fit,type = "response"))
pred
# e) FOR LDA
fit <- lda(Direction ~ Lag2, data = dt)
pred <- data.table("prob" = predict(fit,type = "response"))
pred$prob
pred
# e) FOR LDA
fit <- lda(Direction ~ Lag2, data = dt)
pred <- data.table("prob" = predict(fit,type = "response"))
pred$prob
# e) FOR LDA
fit <- lda(as.numeric(Direction) ~ Lag2, data = dt)
pred <- data.table("prob" = predict(fit,type = "response"))
pred$prob
# e) FOR LDA
fit <- lda(Direction ~ Lag2, data = dt)
pred <- data.table("prob" = predict(fit,type = "response"))
pred$prob
predict(fit,type = "response")
predict(fit,type = "response")
# e) FOR LDA
fit <- lda(Direction ~ Lag2, data = dt)
pred <- data.table("prob" = predict(fit,type = "response"))
pred[prob > 0.5, pred := "Up"]
names(fit)
# e) FOR LDA
alt.fit <- lda(Direction ~ Lag2, data = dt)
names(alt.fit)
pred <- data.table("prob" = predict(alt.fit,type = "response"))
# e) FOR LDA
alt.fit <- lda(Direction ~ Lag2, data = dt)
pred <- data.table("prob" = predict(alt.fit,type = "response"))
# e) FOR LDA
alt.fit <- lda(Direction ~ Lag2, data = dt)
pred <- data.table("prob" = predict(alt.fit,dt))
pred[prob > 0.5, pred := "Up"]
pred
pred <- data.table("prob" = predict(alt.fit,dt$Direction))
# e) FOR LDA
alt.fit <- lda(Direction ~ Lag2, data = dt)
pred <- data.table("prob" = predict(alt.fit,dt$Direction))
pred <- data.table("prob" = predict(alt.fit,dt[,.(Direction,Lag2)])
# e) FOR LDA
alt.fit <- lda(Direction ~ Lag2, data = dt)
pred <- data.table("prob" = predict(alt.fit,dt[,.(Direction,Lag2)]))
rped
pred
pred <- predict(alt.fit,dt)
pred$class
table(pred$class, dt$Direction)
(33+580)/nrow(glm.prob)
(33+580)/length(pred)
(33+580)/nrow(dt)
# e) FOR QDA
alt.fit <- qda(Direction ~ Lag2, data = dt)
pred <- predict(alt.fit,dt)
table(pred$class, dt$Direction)
# e) FOR QDA
alt.fit <- qda(Direction ~ Lag2, data = dt)
pred <- predict(alt.fit,dt)
table(pred$class, dt$Direction)
(0+605)/nrow(dt)
?knn
?knn()
# g) FOR KNN
library(class)
set.seed(1)
nrow(dt)
dt.train <- dt[1:900,]
dt.test <- dt[901:nrow(dt),]
dt.train <- dt[1:900,.(Lag2)]
dt.test <- dt[901:nrow(dt), .(Lag2)]
alt.fit <- knn(dt.train, dt.test, dt.train$Direction, k = 1)
alt.fit <- knn(dt.train, dt.test, dt[1:900,]$Direction, k = 1)
alt.fit <- knn(dt.train, dt.test, dt[1:900,]$Direction, k = 1)
table(alt.fit, dt[901:nrow(dt),Direction])
table(alt.fit, dt[901:nrow(dt),Direction])
(44+51)/nrow(dt[901:nrow(dt),])
# f) FOR QDA
alt.fit <- qda(Direction ~ Lag2, data = dt)
pred <- predict(alt.fit,dt)
table(pred$class, dt$Direction)
# g) FOR KNN
library(class)
set.seed(1)
nrow(dt)
dt.train <- dt[1:900,.(Lag2)]
dt.test <- dt[901:nrow(dt), .(Lag2)]
alt.fit <- knn(dt.train, dt.test, dt[1:900,]$Direction, k = 3)
table(alt.fit, dt[901:nrow(dt),Direction])
(34+65)/nrow(dt[901:nrow(dt),])
alt.fit <- knn(dt.train, dt.test, dt[1:900,]$Direction, k = 5)
table(alt.fit, dt[901:nrow(dt),Direction])
(30+68)/nrow(dt[901:nrow(dt),])
alt.fit <- knn(dt.train, dt.test, dt[1:900,]$Direction, k = 8)
table(alt.fit, dt[901:nrow(dt),Direction])
(38+68)/nrow(dt[901:nrow(dt),])
alt.fit <- knn(dt.train, dt.test, dt[1:900,]$Direction, k = 10)
table(alt.fit, dt[901:nrow(dt),Direction])
(38+68)/nrow(dt[901:nrow(dt),])
alt.fit <- knn(dt.train, dt.test, dt[1:900,]$Direction, k = 8)
table(alt.fit, dt[901:nrow(dt),Direction])
(41+68)/nrow(dt[901:nrow(dt),])
dt <- data.table(Auto)
dt
str(dt)
dt[mpg > mean(mpg), mpg01 := 1]
dt
dt[is.na(mpg01), mpg01 := 0]
dt
dt[mpg > median(mpg), mpg01 := 1]
dt[is.na(mpg01), mpg01 := 0]
dt
# b)
pairs(dt[,-c("name")])
?sample
# c)
dt <- sample(dt)
dt
train <- dt[1:320,]
test <- dt[321:nrow(dt)]
?lda
# d)
lda.fit <- lda(mpg01 ~ horsepower+accelaration+mpg,
data = train)
names(train)
# d)
lda.fit <- lda(mpg01 ~ horsepower+acceleration+mpg,
data = train)
predict(lda.fit, test)
pred <- predict(lda.fit, test)
pred$class
pred <- predict(lda.fit, test, type="prob")
pred
pred <- predict(lda.fit, test, type="response")
pred
pred$class
table(pred$class, test$mpg01)
# c)
dt <- sample(dt)
train <- dt[1:150,]
test <- dt[150:nrow(dt)]
# d)
lda.fit <- lda(mpg01 ~ horsepower+acceleration+mpg,
data = train)
pred <- predict(lda.fit, test, type="response")
table(pred$class, test$mpg01)
train <- dt[1:320,]
test <- dt[320:nrow(dt)]
# d)
lda.fit <- lda(mpg01 ~ horsepower+acceleration+mpg,
data = train)
pred <- predict(lda.fit, test, type="response")
table(pred$class, test$mpg01)
# e)
qda.fit <- qda(mpg01 ~ horsepower+acceleration+mpg,
data = train)
pred <- predict(qda.fit, test, type="response")
table(pred$class, test$mpg01)
train <- dt[1:200,]
test <- dt[200:nrow(dt)]
qda.fit <- qda(mpg01 ~ horsepower+acceleration+mpg,
data = train)
pred <- predict(qda.fit, test, type="response")
table(pred$class, test$mpg01)
nrow(dt)
6/392
# f)
glm.fit <- glm.fit(mpg01 ~ horsepower+acceleration+mpg,
data = train, family = binomial)
# f)
train <- dt[1:320,]
test <- dt[320:nrow(dt)]
glm.fit <- glm.fit(mpg01 ~ horsepower+acceleration+mpg,
data = train, family = binomial)
?glm)
?glm())
?glm()
glm.fit <- glm.fit(mpg01 ~ horsepower + acceleration + mpg,
family = binomial)
glm.fit <- glm.fit(mpg01 ~ horsepower + acceleration + mpg,
family = binomial)
glm.fit <- glm.fit(mpg01 ~ horsepower + acceleration + mpg,
data = train, family = binomial)
glm.fit <- glm(mpg01 ~ horsepower + acceleration + mpg,
data = train, family = binomial)
glm.fit <- glm(mpg01 ~ horsepower + acceleration + mpg,
data = train)
summary(glm.fit)
pred <- predict(glm.fit, test)
pred
pred <- predict(glm.fit, test, type = "prob")
pred <- predict(glm.fit, test, type = "response")
pred
glm.fit <- glm(mpg01 ~ horsepower + acceleration + mpg,
data = train, family = binomial)
pred <- predict(glm.fit, test, type = "response")
pred
unique(factor(pred))
pred <- predict(glm.fit, test)
pred
glm.fit <- glm(mpg01 ~ horsepower + acceleration + mpg,
data = train, family = binomial)
pred <- predict(glm.fit, test)
pred
pred <- predict(glm.fit, test, type = "response")
pred
dt <- data.table(Auto)
# a)
dt[mpg > median(mpg), mpg01 := 1]
dt[is.na(mpg01), mpg01 := 0]
# c)
dt <- sample(dt)
train <- dt[1:320,]
test <- dt[320:nrow(dt)]
glm.fit <- glm(mpg01 ~ horsepower + acceleration + mpg,
data = train, family = binomial)
glm.fit <- glm(mpg01 ~ horsepower + acceleration + mpg,
data = train, family = binomial)
glm.prob <- data.table("prob" = predict(glm.fit, type = "response"))
glm.prob[prob > 0.5, pred := 1]
glm.prob[is.na(pred),pred := 0]
table(glm.prob$pred, train$mpg01)
glm.fit <- glm(mpg01 ~ horsepower + acceleration + mpg,
data = dt, family = binomial)
glm.prob <- data.table("prob" = predict(glm.fit, type = "response"))
glm.prob[prob > 0.5, pred := 1]
glm.prob[is.na(pred),pred := 0]
table(glm.prob$pred, train$mpg01)
glm.fit <- glm(mpg01 ~ horsepower + acceleration + mpg,
data = dt, family = binomial)
glm.prob <- data.table("prob" = predict(glm.fit, type = "response"))
glm.prob[prob > 0.5, pred := 1]
glm.prob[is.na(pred),pred := 0]
table(glm.prob$pred, dt$mpg01)
glm.prob <- data.table("prob" = predict(glm.fit, type = "response"))
glm.prob <- data.table("prob" = predict(glm.fit, test,type = "response"))
glm.prob[prob > 0.5, pred := 1]
glm.prob[is.na(pred),pred := 0]
table(glm.prob$pred, test$mpg01)
# f)
train <- dt[1:200,]
test <- dt[200:nrow(dt)]
glm.fit <- glm(mpg01 ~ horsepower + acceleration + mpg,
data = train, family = binomial)
glm.prob <- data.table("prob" = predict(glm.fit, test,type = "response"))
glm.prob[prob > 0.5, pred := 1]
glm.prob[is.na(pred),pred := 0]
table(glm.prob$pred, test$mpg01)
nrow(dt)
1/392
# g)
train <- dt[1:200,.(horsepower, acceleration, mpg, mpg01)]
# g)
train <- dt[1:320,.(horsepower, acceleration, mpg, mpg01)]
test <- dt[321:nrow(dt), .(horsepower, acceleration, mpg, mpg01)]
knn.fit <- knn(train, test, train$mpg01, k = 1)
table(knn.fit, test[, mpg01])
2/72
knn.fit <- knn(train, test, train$mpg01, k = 3)
table(knn.fit, test[, mpg01])
knn.fit <- knn(train, test, train$mpg01, k = 5)
table(knn.fit, test[, mpg01])
5/72
6/73
6/72
knn.fit <- knn(train, train, train$mpg01, k = 5)
table(knn.fit, train[, mpg01])
knn.fit <- knn(train, train, train$mpg01, k = 1)
table(knn.fit, train[, mpg01])
knn.fit <- knn(train, train, train$mpg01, k = 3)
table(knn.fit, train[, mpg01])
knn.fit <- knn(train, train, train$mpg01, k = 5)
table(knn.fit, train[, mpg01])
