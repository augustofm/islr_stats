ggplot(dt[wtg_id == 1010 & datetime > as.POSIXct("2017-02-01", "UTC") &
datetime < as.POSIXct("2017-02-15", "UTC")])+
geom_point(aes(datetime, var_2010), color="red")+
geom_point(aes(datetime, var_2020), alpha=0.1)+
geom_point(aes(datetime, var_9100/50), alpha=0.1, color = "blue")
ggplot(dt[wtg_id == 1010 & datetime > as.POSIXct("2017-02-01", "UTC") &
datetime < as.POSIXct("2017-02-20", "UTC")])+
geom_point(aes(datetime, var_2010), color="red")+
geom_point(aes(datetime, var_2020), alpha=0.1)+
geom_point(aes(datetime, var_9100/50), alpha=0.1, color = "blue")
query <- paste0("SELECT dt.wtg_id, dt.datetime, dt.var_1100, dt.var_1200, dt.var_9100, dt.var_2010, dt.var_2020
FROM operational.operational_45 dt
WHERE dt.datetime > '2016-01-01'")
con <- dbConnect(drv,
dbname = dbname,
host = "edp.ctk2k2cycpp2.us-west-2.rds.amazonaws.com",
port = 5432,
user = user,
password = password)
require(zoo)
require(stringr)
require(data.table)
require(RPostgreSQL)
require(ICSNP)
dbname = "dim_05"
user = "summer"
password = "delfos951753"
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv,
dbname = dbname,
host = "edp.ctk2k2cycpp2.us-west-2.rds.amazonaws.com",
port = 5432,
user = user,
password = password)
rm(dbname, user, password)
tz = "UTC"
Sys.setenv(TZ='UTC')
query <- paste0("SELECT dt.wtg_id, dt.datetime, dt.var_1100, dt.var_1200, dt.var_9100, dt.var_2010, dt.var_2020
FROM operational.operational_45 dt
WHERE dt.datetime > '2016-01-01'")
dt <- data.table(dbGetQuery(con, query))
ggplot(dt[wtg_id == 1010 & datetime > as.POSIXct("2016-10-01", "UTC") &
datetime < as.POSIXct("2016-12-01", "UTC")])+
geom_point(aes(datetime, var_2010), color="red")+
geom_point(aes(datetime, var_2020), alpha=0.1)+
geom_point(aes(datetime, var_9100/50), alpha=0.1, color = "blue")
ggplot(dt[wtg_id == 1010 & datetime > as.POSIXct("2016-10-01", "UTC") &
datetime < as.POSIXct("2016-12-01", "UTC")])+
geom_point(aes(datetime, var_2010), color="red")+
#geom_point(aes(datetime, var_2020), alpha=0.1)+
geom_point(aes(datetime, var_9100/50), alpha=0.1, color = "blue")
ggplot(dt[wtg_id == 1010 & datetime > as.POSIXct("2016-10-01", "UTC") &
datetime < as.POSIXct("2016-12-01", "UTC")])+
geom_point(aes(datetime, var_2010), color="red")+
geom_point(aes(datetime, var_2020), alpha=0.1)+
geom_point(aes(datetime, var_9100/50), alpha=0.1, color = "blue")
dic.fail[wtg_id==1010, .(start_time, description, system)]
dic.fail[wtg_id==1010, .(start_time, end_time, description, system)]
dic.fail[wtg_id==1010, .(start_time, end_time, description, system)]
ggplot(dt[wtg_id == 1010 & datetime > as.POSIXct("2016-10-01", "UTC") &
datetime < as.POSIXct("2016-12-30", "UTC")])+
geom_point(aes(datetime, var_2010), color="red")+
geom_point(aes(datetime, var_2020), alpha=0.1)+
geom_point(aes(datetime, var_9100/50), alpha=0.1, color = "blue")
ggplot(dt[wtg_id == 1010 & datetime > as.POSIXct("2016-10-01", "UTC") &
datetime < as.POSIXct("2016-12-30", "UTC")])+
geom_point(aes(datetime, var_2010), color="red")+
#geom_point(aes(datetime, var_2020), alpha=0.1)+
geom_point(aes(datetime, var_9100/50), alpha=0.1, color = "blue")
ggplot(dt[wtg_id == 1010 & datetime > as.POSIXct("2016-12-01", "UTC") &
datetime < as.POSIXct("2016-12-30", "UTC")])+
geom_point(aes(datetime, var_2010), color="red")+
#geom_point(aes(datetime, var_2020), alpha=0.1)+
geom_point(aes(datetime, var_9100/50), alpha=0.1, color = "blue")
dic.fail[wtg_id==1010, .(start_time, end_time, description, system)]
View(dic.fail[system=="Transmission", .(start_time, end_time, description, system)])
View(dic.fail[system=="Transmission", .(wtg_id, start_time, end_time, description, system)])
View(dic.fail[system=="Transmission", .(wtg_id, start_time, end_time, description, system, duration)])
40283/3600
query <- paste0("SELECT dt.wtg_id, dt.datetime, dt.var_1100, dt.var_1200, dt.var_9100, dt.var_2010, dt.var_2020
FROM operational.operational_45 dt
WHERE dt.datetime > '2015-05-01' and dt.datetime < '2015-07-01")
dt <- data.table(dbGetQuery(con, query))
query <- paste0("SELECT dt.wtg_id, dt.datetime, dt.var_1100, dt.var_1200, dt.var_9100, dt.var_2010, dt.var_2020
FROM operational.operational_45 dt
LEFT JOIN operational.flag_45 flag
ON flag.wtg_id=dt.wtg_id AND flag.datetime=dt.datetime
LEFT JOIN alarms.alarm_45_exp alarm
ON alarm.wtg_id=dt.wtg_id AND alarm.datetime=dt.datetime
WHERE dt.wtg_id = 1010 & dt.datetime > '2015-06-01' and dt.datetime < '2017-01-01")
dt <- data.table(dbGetQuery(con, query))
require(zoo)
require(stringr)
require(data.table)
require(RPostgreSQL)
require(ICSNP)
dbname = "dim_05"
user = "summer"
password = "delfos951753"
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv,
dbname = dbname,
host = "edp.ctk2k2cycpp2.us-west-2.rds.amazonaws.com",
port = 5432,
user = user,
password = password)
rm(dbname, user, password)
tz = "UTC"
Sys.setenv(TZ='UTC')
query <- paste0("SELECT dt.wtg_id, dt.datetime, dt.var_1100, dt.var_1200, dt.var_9100, dt.var_2010, dt.var_2020
FROM operational.operational_45 dt
LEFT JOIN operational.flag_45 flag
ON flag.wtg_id=dt.wtg_id AND flag.datetime=dt.datetime
LEFT JOIN alarms.alarm_45_exp alarm
ON alarm.wtg_id=dt.wtg_id AND alarm.datetime=dt.datetime
WHERE dt.wtg_id = 1010 & dt.datetime > '2015-06-01' and dt.datetime < '2017-01-01")
query <- paste0("SELECT dt.wtg_id, dt.datetime, dt.var_1100, dt.var_1200, dt.var_9100, dt.var_2010, dt.var_2020
FROM operational.operational_45 dt
LEFT JOIN operational.flag_45 flag
ON flag.wtg_id=dt.wtg_id AND flag.datetime=dt.datetime
LEFT JOIN alarms.alarm_45_exp alarm
ON alarm.wtg_id=dt.wtg_id AND alarm.datetime=dt.datetime
WHERE dt.wtg_id = 1010 & dt.datetime > '2015-06-01' and dt.datetime < '2017-01-01")
dt <- data.table(dbGetQuery(con, query))
query <- paste0("SELECT dt.wtg_id, dt.datetime, dt.var_1100, dt.var_1200, dt.var_9100, dt.var_2010, dt.var_2020, flag.flag_3, flag.flag_4, flag.flag_6, alarm.code_list
FROM operational.operational_45 dt
LEFT JOIN operational.flag_45 flag
ON flag.wtg_id=dt.wtg_id AND flag.datetime=dt.datetime
LEFT JOIN alarms.alarm_45_exp alarm
ON alarm.wtg_id=dt.wtg_id AND alarm.datetime=dt.datetime
WHERE dt.wtg_id = 1010 & dt.datetime > '2015-06-01' and dt.datetime < '2017-01-01")
dt <- data.table(dbGetQuery(con, query))
query <- paste0("SELECT dt.wtg_id, dt.datetime, dt.var_1100, dt.var_1200, dt.var_9100, dt.var_2010, dt.var_2020, flag.flag_3, flag.flag_4, flag.flag_6, alarm.code_list
FROM operational.operational_45 dt
LEFT JOIN operational.flag_45 flag
ON flag.wtg_id=dt.wtg_id AND flag.datetime=dt.datetime
LEFT JOIN alarms.alarm_45_exp alarm
ON alarm.wtg_id=dt.wtg_id AND alarm.datetime=dt.datetime
WHERE dt.wtg_id = 1010 AND dt.datetime > '2015-06-01' AND dt.datetime < '2017-01-01")
dt <- data.table(dbGetQuery(con, query))
query <- paste0("SELECT dt.wtg_id, dt.datetime, dt.var_1100, dt.var_1200, dt.var_9100, dt.var_2010, dt.var_2020, flag.flag_3, flag.flag_4, flag.flag_6, alarm.code_list
FROM operational.operational_45 dt
LEFT JOIN operational.flag_45 flag
ON flag.wtg_id=dt.wtg_id AND flag.datetime=dt.datetime
LEFT JOIN alarms.alarm_45_exp alarm
ON alarm.wtg_id=dt.wtg_id AND alarm.datetime=dt.datetime
WHERE dt.wtg_id = 1010 AND dt.datetime > '2015-06-01' AND dt.datetime < '2017-01-01'")
dt <- data.table(dbGetQuery(con, query))
dt <- na.omit(dt)
dt.bk <- copy(dt)
require(ggplot2)
dt[flag_3 | flag_4, is.bad.data := 1]
dt[flag_6==T, is.down.time := 1]
dt[is.na(is.bad.data), is.bad.data := 0]
dt[is.na(is.down.time), is.down.time := 0]
dt <- dt[is.bad.data == 0 & is.down.time == 0, .(wtg_id, datetime, var_1100, var_1200, var_9100, var_2010, var_2020)]
wtg.list <- 1010
{
tstart <- "2015-05-01"
tend <- "2017-01-01"
dt.all <- data.table(expand.grid(wtg_id = wtg.list,
datetime = seq(as.POSIXct(tstart, tz = tz) + 600,
as.POSIXct(tend, tz = tz),
by = "10 mins")))
setorder(dt.all, datetime, wtg_id)
}
# Bindar dt nos datetimes afetados de dt.all ----
{
dt <- dt[dt.all, on = .(wtg_id, datetime)]
}
tsquared.stat <- function(dt){
dt <- na.omit(as.data.table(dt))
a <- prcomp(dt, center = T, scale. = T)$x
b <- unlist(lapply(data.table(prcomp(dt, center = T, scale. = T)$x), mean, 2))
return(as.vector(HotellingsT2(a, mu=b)$statistic))
}
{
N <- 144*60
p.model <- dt[,]
p.model[, tsquared := 0]
setorder(p.model, wtg_id, datetime)
p.model[,
tsquared := c(rep(NA, N-1),
rollapply(as.data.table(.(var_1200, var_9100, var_2010, var_2020)),
width = N, tsquared.stat)),
by = wtg_id]
p.model[tsquared == 0, tsquared := NA]
}
g <- ggplot(data=dt)+
geom_point(aes(x=datetime,y=tsquared))+
labs(title = paste0(round(N/144), " days smoothing"))+
geom_rect(data = dic.fail[system=="Transmission" & wtg_id==1010],
aes(xmin=start_time, xmax=end_time, ymin=-Inf, ymax=+Inf,
alpha = 0.2))+
theme_bw()
g
N <- 144*2
p.model[, tsquared.smt := 0]
setorder(p.model, wtg_id, datetime)
p.model[,
tsquared.smt := c(rep(NA, N-1),
rollapply(tsquared,
width = N, weigthed.mean, w=1:N)),
by = wtg_id]
require(zoo)
N <- 144*2
p.model[, tsquared.smt := 0]
setorder(p.model, wtg_id, datetime)
p.model[,
tsquared.smt := c(rep(NA, N-1),
rollapply(tsquared,
width = N, weigthed.mean, w=1:N)),
by = wtg_id]
p.model[,
tsquared.smt := c(rep(NA, N-1),
rollapply(tsquared,
width = N, weighted.mean, w=1:N)),
by = wtg_id]
p.model[tsquared.smt == 0, tsquared := NA]
g <- ggplot(data=dt)+
geom_point(aes(x=datetime,y=tsquared.smt))+
labs(title = paste0(round(N/144), " days smoothing"))+
geom_rect(data = dic.fail[system=="Transmission" & wtg_id==1010],
aes(xmin=start_time, xmax=end_time, ymin=-Inf, ymax=+Inf,
alpha = 0.2))+
theme_bw()
g
{
N <- 144*7
p.model[, tsquared.smt := 0]
setorder(p.model, wtg_id, datetime)
p.model[,
tsquared.smt := c(rep(NA, N-1),
rollapply(tsquared,
width = N, weighted.mean, w=1:N)),
by = wtg_id]
p.model[tsquared.smt == 0, tsquared := NA]
}
g <- ggplot(data=dt)+
geom_point(aes(x=datetime,y=tsquared.smt))+
labs(title = paste0(round(N/144), " days smoothing"))+
geom_rect(data = dic.fail[system=="Transmission" & wtg_id==1010],
aes(xmin=start_time, xmax=end_time, ymin=-Inf, ymax=+Inf,
alpha = 0.2))+
theme_bw()
g
g <- ggplot(data=dt)+
geom_point(aes(x=datetime,y=tsquared))+
labs(title = paste0(round(N/144), " days smoothing"))+
geom_rect(data = dic.fail[system=="Transmission" & wtg_id==1010],
aes(xmin=start_time, xmax=end_time, ymin=-Inf, ymax=+Inf,
alpha = 0.2))+
theme_bw()
g
{
N <- 144*30
p.model[, tsquared.smt := 0]
setorder(p.model, wtg_id, datetime)
p.model[,
tsquared.smt := c(rep(NA, N-1),
rollapply(tsquared,
width = N, weighted.mean, w=1:N)),
by = wtg_id]
p.model[tsquared.smt == 0, tsquared := NA]
}
g <- ggplot(data=dt)+
geom_point(aes(x=datetime,y=tsquared.smt))+
labs(title = paste0(round(N/144), " days smoothing"))+
geom_rect(data = dic.fail[system=="Transmission" & wtg_id==1010],
aes(xmin=start_time, xmax=end_time, ymin=-Inf, ymax=+Inf,
alpha = 0.2))+
theme_bw()
g
setwd("~/Documents/repository/islr_stats/exercises")
require(data.table)
require(ISLR)
glm.fit <- glm(default ~ income+balance,
data = dt,
family = binomial)
dt <- data.table(Default)
glm.fit <- glm(default ~ income+balance,
data = dt,
family = binomial)
# a)
summary(glm.fit)
boot.fn <- function(dt, index)
return(coef(glm(default ~ income+balance, data = dt[index,],
family = binomial)))
dt <- data.table(Default)
nrow(dt)
boot.fn(dt, 1:900)
require(boot)
boot(data = dt, statistic = boot.fn, R = 1000)
dt <- data.table(Weekly)
glm(Direction ~ Lag1 + Lag2, data = dt)
dt
glm(Direction ~ Lag1 + Lag2, data = dt, family = binomial)
glm.fit <- glm(Direction ~ Lag1 + Lag2, data = dt, family = binomial)
glm.fit <- glm(Direction ~ Lag1 + Lag2, data = dt, family = binomial)
plot(glm.fit)
plot(glm.fit)
glm.fit2 <- glm(Direction ~ Lag1 + Lag2, data = dt[-1,], family = binomial)
glm.fit
glm.fit2
glm.prob <- data.table("prob" = predict(glm.fit2, dt[1,], type = "response"))
glm.prob[prob > 0.5, pred := "Up"]
glm.prob[is.na(pred),pred := "Down"]
glm.prob
table(glm.prob$pred, dt[1,Direction])
glm.prob$pred
i=1
dt[i,Direction]
glm.prob$pred == dt[i,Direction]
dt[i,Direction]
i=3
dt[i,Direction]
glm.prob$pred == dt[i,Direction]
# d) In a loop
n <- rep(0, nrow(dt))
for (i in 1:nrow(dt)){
glm.fit <- glm(Direction ~ Lag1 + Lag2, data = dt[-i,], family = binomial)
glm.prob <- data.table("prob" = predict(glm.fit, dt[i,], type = "response"))
glm.prob[pred := ifelse(prob > 0.5, "Up", "Down")]
if (glm.prob$pred != dt[i,Direction])
n[i] <- 1
}
glm.prob
class(glm.prob)
glm.prob[pred := ifelse(prob > 0.5, "Up", "Down")]
i
glm.mprob
glm.prob
# d) In a loop
n <- rep(0, nrow(dt))
for (i in 1:nrow(dt)){
glm.fit <- glm(Direction ~ Lag1 + Lag2, data = dt[-i,], family = binomial)
glm.prob <- data.table("prob" = predict(glm.fit, dt[i,], type = "response"))
glm.prob[,pred := ifelse(prob > 0.5, "Up", "Down")]
if (glm.prob$pred != dt[i,Direction])
n[i] <- 1
}
n
sum(n)
sum(n)/length(n)
sum(n)*100/length(n)
round(sum(n)*100/length(n))
round(sum(n)*100/length(n),2)
round(sum(n)*100/length(n),4)
round(sum(n)*100/length(n),2)
round(sum(n)*100/length(n),3)
cat(paste0((round(sum(n)*100/length(n),3)),"%")
cat(paste0((round(sum(n)*100/length(n),3)),"%"))
mean(n)
cv.glm(Direction ~ Lag1 + Lag2, data = dt, family = binomail)
cv.glm(Direction ~ Lag1 + Lag2, data = dt, family = binomial)
cv.glm(Direction ~ Lag1 + Lag2, data = dt)
cv.glm(Direction ~ Lag1 + Lag2, data = dt, family = binomial)
cv.glm(dt, glm(Direction ~ Lag1 + Lag2, data = dt, family = binomial))
cv.glm(dt, glm(Direction ~ Lag1 + Lag2, data = dt, family = binomial))$delta[1]
cv.glm(dt, glm(Direction ~ Lag1 + Lag2, data = dt, family = binomial))$delta
glm.fit2 <- glm(Direction ~ Lag1 + Lag2, data = dt, family = binomial)
glm.prob <- data.table("prob" = predict(glm.fit2, dt, type = "response"))
glm.prob[prob > 0.5, pred := "Up"]
glm.prob[is.na(pred),pred := "Down"]
table(glm.prob$pred, dt[,Direction])
(446+38)/nrow(dt)
#LOOCV Error
cat(paste0((round(sum(n)*100/length(n),3)),"%"))
## QUESTION 07 ----
set.seed(1)
x = rnorm(100)
y = x-2*x^2+rnorm(100)
plot(x,y)
# c)
# i.) Y = B0+B1X+e
dt <- data.table(x,y)
cv.err <- cv.glm(dt, glm(y ~ x, data = dt))
cv.err$delta
cv.err <- cv.glm(dt, glm(y ~ x+I(x^2), data = dt))
cv.err$delta
# i.) Y = B0+B1X+B2X2+B3X3e
dt <- data.table(x,y)
cv.err <- cv.glm(dt, glm(y ~ x+poli(x,3), data = dt))
cv.err <- cv.glm(dt, glm(y ~ x+poly(x,3), data = dt))
cv.err <- cv.glm(dt, glm(y ~ poly(x,3), data = dt))
cv.err$delta
cv.err <- cv.glm(dt, glm(y ~ poly(x,4), data = dt))
cv.err$delta
cv.err <- data.table(seed1 = 0, seed2 = 0)
cv.err
cv.err <- list()
cv.err.total <- list()
# i.) Y = B0+B1X+e
cv.err <- cv.glm(dt, glm(y ~ x, data = dt))
cv.err.total <- rbindlist(cv.err.total, cv.err)
cv.err.total <- rbindlist(cv.err.total, cv.err, use.names = F)
cv.err.total <- rbindlist(cv.err.total, cv.err, use.names = F, fill = F)
c(cv.err.total, cv.err)
# i.) Y = B0+B1X+e
cv.err <- cv.glm(dt, glm(y ~ x, data = dt))$delta
cv.err.total <- list()
c(cv.err.total, cv.err)
c(cv.err.total, unlist(cv.err))
cv.err
cv.err.total <- c()
c(cv.err.total, cv.err)
cv.err.total <- list()
c(cv.err.total, cv.err)
# i.) Y = B0+B1X+B2X2+e
cv.err <- cv.glm(dt, glm(y ~ x+I(x^2), data = dt))
# i.) Y = B0+B1X+B2X2+e
cv.err <- cv.glm(dt, glm(y ~ x+I(x^2), data = dt))$delta
c(cv.err.total, cv.err)
# i.) Y = B0+B1X+e
cv.glm(dt, glm(y ~ x, data = dt))$delta
# c)
dt <- data.table(x,y)
# i.) Y = B0+B1X+e
cv.glm(dt, glm(y ~ x, data = dt))$delta
# i.) Y = B0+B1X+B2X2+B3X3+e
cv.err <- cv.glm(dt, glm(y ~ poly(x,3), data = dt))$delta
# i.) Y = B0+B1X+B2X2+B3X3+e
cv.glm(dt, glm(y ~ poly(x,3), data = dt))$delta
# i.) Y = B0+B1X+B2X2+e
cv.glm(dt, glm(y ~ x+I(x^2), data = dt))$delta
# i.) Y = B0+B1X+B2X2+B3X3+e
cv.glm(dt, glm(y ~ poly(x,3), data = dt))$delta
# i.) Y = B0+B1X+B2X2+B3X3+B4X4+e
cv.err <- cv.glm(dt, glm(y ~ poly(x,4), data = dt))$delta
# i.) Y = B0+B1X+B2X2+B3X3+B4X4+e
cv.glm(dt, glm(y ~ poly(x,4), data = dt))$delta
# c)
dt <- data.table(x,y)
# i.) Y = B0+B1X+e
cv.glm(dt, glm(y ~ x, data = dt))$delta
# i.) Y = B0+B1X+B2X2+e
cv.glm(dt, glm(y ~ x+I(x^2), data = dt))$delta
# i.) Y = B0+B1X+B2X2+B3X3+e
cv.glm(dt, glm(y ~ poly(x,3), data = dt))$delta
# i.) Y = B0+B1X+B2X2+B3X3+B4X4+e
cv.glm(dt, glm(y ~ poly(x,4), data = dt))$delta
# c)
set.seed(1)
dt <- data.table(x = rnorm(100),y = x-2*x^2+rnorm(100))
# i.) Y = B0+B1X+e
cv.glm(dt, glm(y ~ x, data = dt))$delta
# i.) Y = B0+B1X+B2X2+e
cv.glm(dt, glm(y ~ x+I(x^2), data = dt))$delta
# i.) Y = B0+B1X+B2X2+B3X3+e
cv.glm(dt, glm(y ~ poly(x,3), data = dt))$delta
# i.) Y = B0+B1X+B2X2+B3X3+B4X4+e
cv.glm(dt, glm(y ~ poly(x,4), data = dt))$delta
# d)
set.seed(2)
dt <- data.table(x = rnorm(100),y = x-2*x^2+rnorm(100))
# i.) Y = B0+B1X+e
cv.glm(dt, glm(y ~ x, data = dt))$delta
# i.) Y = B0+B1X+B2X2+e
cv.glm(dt, glm(y ~ x+I(x^2), data = dt))$delta
# i.) Y = B0+B1X+B2X2+B3X3+e
cv.glm(dt, glm(y ~ poly(x,3), data = dt))$delta
# i.) Y = B0+B1X+B2X2+B3X3+B4X4+e
cv.glm(dt, glm(y ~ poly(x,4), data = dt))$delta
plot(x,y)
# c)
set.seed(1)
dt <- data.table(x = rnorm(100),y = x-2*x^2+rnorm(100))
plot(dt)
# i.) Y = B0+B1X+e
cv.glm(dt, glm(y ~ x, data = dt))$delta
# i.) Y = B0+B1X+B2X2+e
cv.glm(dt, glm(y ~ x+I(x^2), data = dt))$delta
# i.) Y = B0+B1X+B2X2+B3X3+e
cv.glm(dt, glm(y ~ poly(x,3), data = dt))$delta
# i.) Y = B0+B1X+B2X2+B3X3+B4X4+e
cv.glm(dt, glm(y ~ poly(x,4), data = dt))$delta
# d)
set.seed(2)
dt <- data.table(x = rnorm(100),y = x-2*x^2+rnorm(100))
plot(dt)
# d)
set.seed(4)
dt <- data.table(x = rnorm(100),y = x-2*x^2+rnorm(100))
x = rnorm(100)
dt <- data.table(x,y = x-2*x^2+rnorm(100))
plot(dt)
# c)
set.seed(1)
x = rnorm(100)
dt <- data.table(x,y = x-2*x^2+rnorm(100))
plot(dt)
# i.) Y = B0+B1X+e
cv.glm(dt, glm(y ~ x, data = dt))$delta
# i.) Y = B0+B1X+B2X2+e
cv.glm(dt, glm(y ~ x+I(x^2), data = dt))$delta
# i.) Y = B0+B1X+B2X2+B3X3+e
cv.glm(dt, glm(y ~ poly(x,3), data = dt))$delta
# i.) Y = B0+B1X+B2X2+B3X3+B4X4+e
cv.glm(dt, glm(y ~ poly(x,4), data = dt))$delta
# d)
set.seed(2)
x = rnorm(100)
dt <- data.table(x,y = x-2*x^2+rnorm(100))
plot(dt)
# i.) Y = B0+B1X+e
cv.glm(dt, glm(y ~ x, data = dt))$delta
# i.) Y = B0+B1X+B2X2+e
cv.glm(dt, glm(y ~ x+I(x^2), data = dt))$delta
# i.) Y = B0+B1X+B2X2+B3X3+e
cv.glm(dt, glm(y ~ poly(x,3), data = dt))$delta
# i.) Y = B0+B1X+B2X2+B3X3+B4X4+e
cv.glm(dt, glm(y ~ poly(x,4), data = dt))$delta
