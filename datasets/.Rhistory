X<-matrix(0,nrow=(length(x_train)),ncol=(M+1))
for(i in 1:(length(x_train))){
for(j in 1:(M+1)){
X[i,j]<-x_train[i]^(j-1)
}
}
#Calculating the inverse
aux1 <- ginv(t(X)%*%X)
aux2 <- t(X)%*%as.matrix(target_train)
W[[M+1]] <- aux1 %*% aux2
X_validation<-matrix(0,nrow=length(x_valid),ncol=(M+1))
#plot(x,target,col='#2c7bb6',xlab='x',main='Target values')
for(i in 1:length(x_valid)){
for(j in 1:(M+1)){
X_validation[i,j]<-x_valid[i]^(j-1)
}
}
eols_matrix[,S_index]  <- 0.5*(X_validation%*%W[[M+1]] - target_valid)^2
}
eols_matrix
eols_vec<-apply(eols_matrix,1,mean)
eols_vec
sum(eols_vec)
eols[M+1]<-sum(eols_vec)
if(M==0){
eols_min<-eols[M+1]
}
if(eols[M+1]<eols_min){
eols_min<-eols[M+1]
M_index <- M
}
}
cat(paste0("Best M value found: ",M_index+1,"\n"))
return(list(M_index,W[[M_index+1]]))
}
result1<-regression1(points,target,3,Mmax,N)
library(MASS) # Fr generalized inverse of a matrix
library(stringr)
require(data.table)
require(ggplot2)
regression1<-function(points,target,S,Mmax,N){
partition_size<-N/S
#S<-N
part<-split(points, sample(rep(1:S, N/S)))
for(M in 0:(Mmax))  {
#M<-2
eols_matrix<-matrix(0,nrow = N/S, ncol = S)
for(S_index in 1:S){
obs<-part
val<-as.data.frame(obs[S_index])
obs[S_index]<-NULL
train<-do.call(rbind, obs)
x_train<-as.vector(train[,1])
target_train<-as.vector(train[,2])
x_valid<-as.vector(val[,1])
target_valid<-as.vector(val[,2])
X<-matrix(0,nrow=(length(x_train)),ncol=(M+1))
for(i in 1:(length(x_train))){
for(j in 1:(M+1)){
X[i,j]<-x_train[i]^(j-1)
}
}
#Calculating the inverse
aux1 <- ginv(t(X)%*%X)
aux2 <- t(X)%*%as.matrix(target_train)
W[[M+1]] <- aux1 %*% aux2
X_validation<-matrix(0,nrow=length(x_valid),ncol=(M+1))
#plot(x,target,col='#2c7bb6',xlab='x',main='Target values')
for(i in 1:length(x_valid)){
for(j in 1:(M+1)){
X_validation[i,j]<-x_valid[i]^(j-1)
}
}
eols_matrix[,S_index]  <- 0.5*(X_validation%*%W[[M+1]] - target_valid)^2
}
eols_matrix
eols_vec<-apply(eols_matrix,1,mean)
eols_vec
sum(eols_vec)
eols[M+1]<-sum(eols_vec)
if(M==0){
eols_min<-eols[M+1]
}
if(eols[M+1]<eols_min){
eols_min<-eols[M+1]
M_index <- M
}
}
cat(paste0("Best M value found: ",M_index+1,"\n"))
return(list(M_index,W[[M_index+1]]))
}
result1<-regression1(points,target,3,Mmax,N)
M_index
abs_w_squared<-apply(W[[5]]^2,2,sum)
abs_w_squared
W[[5]]
result<-regression1(points,target,1,Mmax,N)
regression2<-function(points,target,S,M,N,lambda_min,lambda_max){
increment<-0.25
eols<-vector("list",((lambda_max-lambda_min)/increment)+1)
#S<-3
partition_size<-N/S
part<-split(points, sample(rep(1:S, N/S)))
lambda_value<-0
lambda<-0
while(lambda_value<lambda_max){
# for(lambda in lambda_min:lambda_max)  {
#M<-2
eols_matrix<-matrix(0,nrow = N/S, ncol = S)
eols_total<-matrix(0,nrow=1,ncol=S)
for(S_index in 1:S){
#S_index<-1
obs<-part
val<-as.data.frame(obs[S_index])
obs[S_index]<-NULL
train<-do.call(rbind, obs)
x_train<-as.vector(train[,1])
target_
regression2<-function(points,target,S,M,N,lambda_min,lambda_max){
increment<-0.25
eols<-vector("list",((lambda_max-lambda_min)/increment)+1)
#S<-3
partition_size<-N/S
part<-split(points, sample(rep(1:S, N/S)))
lambda_value<-0
lambda<-0
while(lambda_value<lambda_max){
# for(lambda in lambda_min:lambda_max)  {
#M<-2
eols_matrix<-matrix(0,nrow = N/S, ncol = S)
eols_total<-matrix(0,nrow=1,ncol=S)
for(S_index in 1:S){
#S_index<-1
obs<-part
val<-as.data.frame(obs[S_index])
obs[S_index]<-NULL
train<-do.call(rbind, obs)
x_train<-as.vector(train[,1])
target_train<-as.vector(train[,2])
x_valid<-as.vector(val[,1])
target_valid<-as.vector(val[,2])
X<-matrix(0,nrow=(length(x_train)),ncol=(lambda+1))
for(i in 1:(length(x_train))){
for(j in 1:(lambda+1)){
X[i,j]<-x_train[i]^(j-1)
}
}
#Calculating the inverse
aux1 <- ginv(t(X)%*%X)
aux2 <- t(X)%*%as.matrix(target_train)
W[[lambda+1]] <- aux1 %*% aux2
X_validation<-matrix(0,nrow=length(x_valid),ncol=(lambda+1))
#plot(x,target,col='#2c7bb6',xlab='x',main='Target values')
for(i in 1:length(x_valid)){
for(j in 1:(lambda+1)){
X_validation[i,j]<-x_valid[i]^(j-1)
}
}
eols_matrix[,S_index]  <- 0.5*(X_validation%*%W[[lambda+1]] - target_valid)^2
abs_w_squared<-apply(W[[lambda+1]]^2,2,sum)
eols_matrix
abs_w_squared
eols_total[,S_index]<-sum(eols_matrix[,S_index])+0.5*(1/lambda_value)^4*abs_w_squared #Change value for l
}
eols[lambda+1]<-apply(eols_total,1,mean)
if(lambda==0){
eols_min<-eols[lambda+1]
lambda_index<-lambda
}
if(as.numeric(eols[lambda+1])<eols_min){
eols_min<-as.numeric(eols[lambda+1])
lambda_index <- lambda
}
lambda<-lambda+1
lambda_value<-lambda_value+0.5
}
#  plot(eols[50:100])
eols_min
lambda_index
plot(eols)
lambda_index
eols[6]
cat(paste0("Best M value found: ",lambda_index+1,"\n"))
return(list(lambda_index,W[[lambda_index+1]]))
}
result3<-regression2(points,target,3,Mmax,N,lambda_min,lambda_max)
result3<-regression2(points,target,3,Mmax,N,lambda_min,lambda_max)
regression2<-function(points,target,S,M,N,lambda_min,lambda_max){
increment<-0.25
eols<-vector("list",((lambda_max-lambda_min)/increment)+1)
#S<-3
partition_size<-N/S
part<-split(points, sample(rep(1:S, N/S)))
lambda_value<-0
lambda<-0
while(lambda_value<lambda_max){
# for(lambda in lambda_min:lambda_max)  {
#M<-2
eols_matrix<-matrix(0,nrow = N/S, ncol = S)
eols_total<-matrix(0,nrow=1,ncol=S)
for(S_index in 1:S){
#S_index<-1
obs<-part
val<-as.data.frame(obs[S_index])
obs[S_index]<-NULL
train<-do.call(rbind, obs)
x_train<-as.vector(train[,1])
target_train<-as.vector(train[,2])
x_valid<-as.vector(val[,1])
target_valid<-as.vector(val[,2])
X<-matrix(0,nrow=(length(x_train)),ncol=(lambda+1))
for(i in 1:(length(x_train))){
for(j in 1:(lambda+1)){
X[i,j]<-x_train[i]^(j-1)
}
}
#Calculating the inverse
aux1 <- ginv(t(X)%*%X)
aux2 <- t(X)%*%as.matrix(target_train)
W[[lambda+1]] <- aux1 %*% aux2
X_validation<-matrix(0,nrow=length(x_valid),ncol=(lambda+1))
#plot(x,target,col='#2c7bb6',xlab='x',main='Target values')
for(i in 1:length(x_valid)){
for(j in 1:(lambda+1)){
X_validation[i,j]<-x_valid[i]^(j-1)
}
}
eols_matrix[,S_index]  <- 0.5*(X_validation%*%W[[lambda+1]] - target_valid)^2
abs_w_squared<-apply(W[[lambda+1]]^2,2,sum)
eols_matrix
abs_w_squared
eols_total[,S_index]<-sum(eols_matrix[,S_index])+0.5*(1/lambda_value)^4*abs_w_squared #Change value for l
}
eols[lambda+1]<-apply(eols_total,1,mean)
if(lambda==0){
eols_min<-eols[lambda+1]
lambda_index<-lambda
}
if(as.numeric(eols[lambda+1])<eols_min){
eols_min<-as.numeric(eols[lambda+1])
lambda_index <- lambda
}
lambda<-lambda+1
lambda_value<-lambda_value+0.5
}
#  plot(eols[50:100])
eols_min
lambda_index
plot(eols)
lambda_index
eols[6]
cat(paste0("Best M value found: ",lambda_index+1,"\n"))
return(list(lambda_index,W[[lambda_index+1]]))
}
result3<-regression2(points,target,3,Mmax,N,lambda_min,lambda_max)
library(MASS) # Fr generalized inverse of a matrix
library(stringr)
require(data.table)
require(ggplot2)
N <- 99
result3<-regression2(points,target,3,Mmax,N,lambda_min,lambda_max)
regression2<-function(points,target,S,M,N,lambda_min,lambda_max){
increment<-0.25
eols<-vector("list",((lambda_max-lambda_min)/increment)+1)
#S<-3
partition_size<-N/S
part<-split(points, sample(rep(1:S, N/S)))
lambda_value<-0
lambda<-0
while(lambda_value<lambda_max){
# for(lambda in lambda_min:lambda_max)  {
#M<-2
eols_matrix<-matrix(0,nrow = N/S, ncol = S)
eols_total<-matrix(0,nrow=1,ncol=S)
for(S_index in 1:S){
#S_index<-1
obs<-part
val<-as.data.frame(obs[S_index])
obs[S_index]<-NULL
train<-do.call(rbind, obs)
x_train<-as.vector(train[,1])
target_train<-as.vector(train[,2])
x_valid<-as.vector(val[,1])
target_valid<-as.vector(val[,2])
X<-matrix(0,nrow=(length(x_train)),ncol=(lambda+1))
for(i in 1:(length(x_train))){
for(j in 1:(lambda+1)){
X[i,j]<-x_train[i]^(j-1)
}
}
#Calculating the inverse
aux1 <- ginv(t(X)%*%X)
aux2 <- t(X)%*%as.matrix(target_train)
W[[lambda+1]] <- aux1 %*% aux2
X_validation<-matrix(0,nrow=length(x_valid),ncol=(lambda+1))
#plot(x,target,col='#2c7bb6',xlab='x',main='Target values')
for(i in 1:length(x_valid)){
for(j in 1:(lambda+1)){
X_validation[i,j]<-x_valid[i]^(j-1)
}
}
eols_matrix[,S_index]  <- 0.5*(X_validation%*%W[[lambda+1]] - target_valid)^2
abs_w_squared<-apply(W[[lambda+1]]^2,2,sum)
eols_matrix
abs_w_squared
eols_total[,S_index]<-sum(eols_matrix[,S_index])+0.5*(1/lambda_value)^4*abs_w_squared #Change value for l
}
eols[lambda+1]<-apply(eols_total,1,mean)
if(lambda==0){
eols_min<-as.numeric(eols[lambda+1])
lambda_index<-lambda
}
if(as.numeric(eols[lambda+1])<eols_min){
eols_min<-as.numeric(eols[lambda+1])
lambda_index <- lambda
}
lambda<-lambda+1
lambda_value<-lambda_value+0.5
}
#  plot(eols[50:100])
eols_min
lambda_index
plot(eols)
lambda_index
eols[6]
cat(paste0("Best M value found: ",lambda_index+1,"\n"))
return(list(lambda_index,W[[lambda_index+1]]))
}
result3<-regression2(points,target,3,Mmax,N,lambda_min,lambda_max)
m<-c(0,1,2,3,4,5)
occur<-c(6,10,11,13,6,1)
table<-as.data.frame.table(cbind(m,occur))
View(train)
m<-c(0,1,2,3,4,5)
occur<-c(6,10,11,13,6,1)
table<-as.data.frame.table(rbind(m,occur))
View(table)
table<-as.data.frame.table(m,occur)
table<-data.frame.table(m,occur)
table<-data.table(m,occur)
table<-as.data.table(m,occur)
table<-as.data.table(rbind(m,occur))
m<-c(0,1,2,3,4,5)
occur<-c(6,10,11,13,6,1)
table<-as.data.table(rbind(m,occur))
require(data.table)
m<-c(0,1,2,3,4,5)
occur<-c(6,10,11,13,6,1)
table<-as.data.table(rbind(m,occur))
View(table)
table<-as.data.table(cbind(m,occur))
hist(table)
hist(table$m)
?hist()
hist(table$occur)
barplot(height = table$occur)
?barplot
barplot(height = table$occur, names.arg=table$m)
barplot(height = table$occur, names.arg=table$m)
dev.off()
barplot(height = table$occur, names.arg=table$m)
mle<-sum(table$m*table$occur)/nrow(table)
mle<-sum(table$m*table$occur)/sum(occur)
mle_miu<-sum(table$m*table$occur)/sum(occur)
mle_var<-sum(table$occur*(table$m-mle_miu)^2))/sum(occur)
mle_var<-sum(table$occur*(table$m-mle_miu)^2)/sum(occur)
x   <- seq(1,5,length=1000)
y   <- dnorm(x,mean=mle_miu, sd=mle_var)
plot(x,y, type="l", lwd=1)
x <- c(1,3,2,5)
x
x <- c(1,3,2,5)
x
x = c(1,3,2,5)
x
y = c(1,4,3)
length(x)
length(y)
x+
x+y
x+y
x+y
x = c(1,6,2)
x
y = c(1,4,3)
length(x)
length(y)
x+y
ls()
rm(x,y)
ls()
rm(list=ls())
?matrix()
x = matrix(data=c(1,2,3,4), nrow=2, ncol=2)
x
x = matrix(data=c(1,2,3,4), nrow=2, ncol=2, byrow = T)
x
sqrt(x)
x^2
rnorm(50)
y = x + rnowm(50, mean=50, sd=.1)
y = x + rnorm(50, mean=50, sd=.1)
x = rnorm(50)
y = x + rnorm(50, mean=50, sd=.1)
y
cor(x,y)
x
y
cor(x,y)
set.seed(1303)
rnorm(50)
set.seed(3)
y <- rnorm(100)
mean(y)
var(y)
sqrt(var(y))
sd(y)
x <- rnorm(100)
y <- rnorm(100)
plot(x,y)
plot(x,y,xlab="this is the x-axis",ylab="this is the y-axis",
main="Plot of X vs Y")
plot(x,y,col="green")
x <- seq(1,10)
x
x <- 1:10
x
x <- seq(-pi, pi, length = 50)
x
y <- x
f = outer(x,y,function(x,y)cos(y)/(1+x^2))
contor(x,y,f)
contour(x,y,f)
contour(x,y,nlevels = 45, add = T)
contour(x,y,f, nlevels = 45, add = T)
contour(x,y,f, nlevels = 45)
contour(x,y,f, nlevels = 45, add = T)
fa = (f-t(f))/2
contour(x,y,fa, nlevels = 15)
image(x,y,fa)
persp(x,y,fa)
persp(x,y,fa,theta=30)
persp(x,y,fa,theta = 30,phi = 20)
persp(x,y,fa,theta = 30,phi = 70)
persp(x,y,fa,theta = 30,phi = 40)
persp(x,y,fa,theta = 30,phi = 20)
persp(x,y,fa,theta = 30,phi = 40)
persp(x,y,fa,theta = 30,phi = 70)
persp(x,y,fa,theta = 30,phi = 20)
persp(x,y,fa,theta = 30,phi = 70)
persp(x,y,fa,theta = 30,phi = 20)
persp(x,y,fa,theta = 30,phi = 70)
persp(x,y,fa,theta = 30,phi = 40)
persp(x,y,fa,theta=30)
persp(x,y,fa,theta = 30,phi = 20)
persp(x,y,fa,theta = 30,phi = 70)
persp(x,y,fa,theta = 30,phi = 40)
persp(x,y,fa,theta=30)
persp(x,y,fa,theta = 30,phi = 20)
persp(x,y,fa,theta = 30,phi = 40)
A = matrix(1:16, 4, 4)
A
A[2,3]
A[c(1,3),c(2,4)]
A[1:3,2:4]
A[1:2,]
A[,1:2]
A[1,]
A[-c(1,3),]
A[-c(1,3),-c(1,3,4)]
dim(A)
setwd("~/Documents/stats/datasets")
Auto <- read.table("Auto.data")
require(data.table)
Auto <- fread("Auto.data")
Auto
Auto <- read.table("Auto.data")
fix(Auto)
Auto=read.table("Auto.data",header=T,na.strings="?")
fix(Auto)
Auto = na.omit(Auto)
dim(Auto)
names(Auto)
plot(Auto$cylinders , Auto$mpg)
attach(Auto)
plot(cylinders, mpg)
cylinders = as.factor(cylinders)
plot(cylinders, mpg)
plot(cylinders, mpg, col="red")
plot(cylinders, mpg, col="red", varwidth=T)
plot(cylinders, mpg, col="red", varwidth=T,horizontal =T)
plot(cylinders, mpg, col="red", varwidth=T, xlab="cylinders",
ylab="MPG")
hist(mpg)
hist(mpg,col=2)
hist(mpg,col=2,breaks=15)
pairs(Auto)
pairs(  ∼
mpg + displacement +
horsepower + weight +
acceleration , Auto)
pairs( ~ mpg + displacement +
horsepower + weight +
acceleration , Auto)
plot(horsepower, mpg)
indentify(horsepower, mpg, name)
identify(horsepower, mpg, name)
summary()
summary(Auto)
summary(mpg)
q()
q()
